# zello/docker-compose.yml

services:
  # -----------------
  # SERVIÇO DE USUÁRIOS
  # -----------------
  usuarios-service:
    build:
      context: ./services/srv-usuarios
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./services/srv-usuarios:/code
    env_file:
      - .env # Garante que as variáveis de segredo sejam lidas do arquivo .env
    environment:
      - DATABASE_URL=postgresql://user:password@db-usuarios/mydatabase
    depends_on:
      db-usuarios:
        condition: service_healthy

  db-usuarios:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_usuarios:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

  # -----------------
  # SERVIÇO DE AGENDAMENTOS
  # -----------------
  srv-agendamentos:
    build:
      context: ./services/srv-agendamentos
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8002:8000"
    volumes:
      - ./services/srv-agendamentos:/code
    environment:
      - DATABASE_URL=postgresql://user:password@db-agendamentos/db_agendamentos
    depends_on:
      db-agendamentos:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  db-agendamentos:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=db_agendamentos
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_agendamentos:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db_agendamentos"]
      interval: 5s
      timeout: 5s
      retries: 5

  # -----------------
  # SERVIÇO DE MENSAGERIA
  # -----------------
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

  # -----------------
  # API GATEWAY
  # -----------------
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - usuarios-service
      - srv-agendamentos

volumes:
  postgres_data_usuarios:
  postgres_data_agendamentos: